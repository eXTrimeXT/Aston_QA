import io.qameta.allure.*;
import org.openqa.selenium.*;
import org.openqa.selenium.chrome.ChromeDriver;
import org.testng.Assert;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

@Epic("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ú–¢–°")
@Feature("–û–Ω–ª–∞–π–Ω –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏")
public class MtsTest {
    private WebDriver driver;
    private HomePage homePage;
    private ServicePaymentPage servicePaymentPage;
    private PaymentConfirmationPage paymentConfirmationPage;

    private final String SITE_URL = "https://www.mts.by/";
    private final String PHONE_NUMBER = "297777777";
    private final String DETAILS_LINK = "https://www.mts.by/help/poryadok-oplaty-i-bezopasnost-internet-platezhey/";
    private final String PathToChromeDriver = "C:\\Users\\Timur\\Downloads\\Aston_QA\\src\\chromedriver-win64\\chromedriver.exe";
    private final String SCREENSHOTS_DIR = "allure-report-screenshots";

    @BeforeClass
    @Step("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞ –∏ –æ—Ç–∫—Ä—ã—Ç–∏–µ —Å–∞–π—Ç–∞")
    public void setup() {
        System.setProperty("webdriver.chrome.driver", PathToChromeDriver);
        driver = new ChromeDriver();
        driver.manage().window().maximize();
        driver.get(SITE_URL);

        homePage = new HomePage(driver);
        homePage.acceptCookiesIfPresent();

        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
        createScreenshotsDirectory();
    }

    @Test(priority = 1)
    @Story("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –±–ª–æ–∫–∞")
    @Description("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –±–ª–æ–∫–∞ '–û–Ω–ª–∞–π–Ω –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏'")
    @Severity(SeverityLevel.CRITICAL)
    public void checkBlockTitle() {
        Assert.assertEquals(homePage.getBlockTitleText(), "–û–Ω–ª–∞–π–Ω –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ\n–±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏",
                "Block title text doesn't match expected");
    }

    @Test(priority = 2)
    @Story("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ—Ç–∏–ø–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º")
    @Description("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –ª–æ–≥–æ—Ç–∏–ø–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º")
    @Severity(SeverityLevel.NORMAL)
    public void checkPaymentSystemLogos() {
        List<WebElement> logos = homePage.getPaymentSystemLogos();
        String[] expectedAltTexts = {"Visa", "Verified By Visa", "MasterCard", "MasterCard Secure Code", "–ë–µ–ª–∫–∞—Ä—Ç"};

        Assert.assertEquals(logos.size(), expectedAltTexts.length,
                "Number of payment system logos doesn't match expected");

        for (int i = 0; i < logos.size(); i++) {
            Assert.assertEquals(logos.get(i).getAttribute("alt"), expectedAltTexts[i],
                    "Logo alt text doesn't match for logo " + (i+1));
        }
    }

    @Test(priority = 3)
    @Story("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏ '–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å–µ—Ä–≤–∏—Å–µ'")
    @Description("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ URL —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–∏—Å–µ")
    @Severity(SeverityLevel.MINOR)
    public void checkDetailsLink() {
        WebElement detailsLink = homePage.getDetailsLink();
        Assert.assertEquals(detailsLink.getAttribute("href"), DETAILS_LINK,
                "Details link URL doesn't match expected");
    }

    @Test(priority = 4)
    @Story("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞")
    @Description("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–ø—Ü–∏–π –æ–ø–ª–∞—Ç—ã")
    @Severity(SeverityLevel.NORMAL)
    public void checkEmptyFieldsPlaceholders() {
        String[] paymentOptions = {"–£—Å–ª—É–≥–∏ —Å–≤—è–∑–∏", "–î–æ–º–∞—à–Ω–∏–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç", "–†–∞—Å—Å—Ä–æ—á–∫–∞", "–ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å"};
        String[][] expectedPlaceholders = {
                {"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", "–°—É–º–º–∞", "E-mail –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞"},
                {"–ù–æ–º–µ—Ä –∞–±–æ–Ω–µ–Ω—Ç–∞", "–°—É–º–º–∞", "E-mail –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞"},
                {"–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞ –Ω–∞ 44", "–°—É–º–º–∞", "E-mail –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞"},
                {"–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞ –Ω–∞ 2073", "–°—É–º–º–∞", "E-mail –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞"}
        };

        for (int i = 0; i < paymentOptions.length; i++) {
            homePage.selectPaymentOption(paymentOptions[i]);
            List<WebElement> inputFields = homePage.getPaymentFormInputs();

            Assert.assertEquals(inputFields.size(), expectedPlaceholders[i].length,
                    "Number of input fields doesn't match for " + paymentOptions[i]);

            for (int j = 0; j < inputFields.size(); j++) {
                Assert.assertEquals(inputFields.get(j).getAttribute("placeholder"), expectedPlaceholders[i][j],
                        "Placeholder doesn't match for field " + (j+1) + " in " + paymentOptions[i]);
            }
        }

        homePage.selectPaymentOption("–£—Å–ª—É–≥–∏ —Å–≤—è–∑–∏");
    }

    @Test(priority = 5)
    @Story("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã –æ–ø–ª–∞—Ç—ã")
    @Description("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º—ã –æ–ø–ª–∞—Ç—ã —É—Å–ª—É–≥ —Å–≤—è–∑–∏")
    @Severity(SeverityLevel.CRITICAL)
    public void testPaymentForm() {
        servicePaymentPage = new ServicePaymentPage(driver);

        Assert.assertTrue(servicePaymentPage.isServiceConnectionSelected(),
                "Service connection is not selected");

        servicePaymentPage.enterPhoneNumber(PHONE_NUMBER);
        servicePaymentPage.enterAmount("1");

        Assert.assertTrue(servicePaymentPage.isContinueButtonEnabled(),
                "Continue button is not enabled");
        Assert.assertEquals(servicePaymentPage.getContinueButtonText(), "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
                "Continue button text doesn't match");

        servicePaymentPage.clickContinueButton();
    }

    @Test(priority = 6)
    @Story("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞")
    @Description("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞")
    @Severity(SeverityLevel.CRITICAL)
    public void testPaymentConfirmationPage() {
        paymentConfirmationPage = new PaymentConfirmationPage(driver);
        Assert.assertTrue(paymentConfirmationPage.isConfirmationPageDisplayed(),
                "Payment confirmation page is not displayed");
        Assert.assertTrue(paymentConfirmationPage.isPhoneNumberDisplayed("375297777777"),
                "Phone number is not displayed correctly");
        Assert.assertTrue(paymentConfirmationPage.isAmountDisplayed("1"),
                "Amount is not displayed correctly");

        String[] cardFieldPlaceholders = {
                "–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã",
                "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è",
                "–ò–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞",
                "CVC"
        };

        List<WebElement> cardInputs = paymentConfirmationPage.getCardInputs();
        for (int i = 0; i < cardInputs.size(); i++) {
            Assert.assertEquals(cardInputs.get(i).getAttribute("placeholder"), cardFieldPlaceholders[i],
                    "Card field placeholder doesn't match for field " + (i+1));
        }

        String[] expectedPaymentIcons = {"visa", "mastercard", "belcard"};
        List<WebElement> paymentIcons = paymentConfirmationPage.getPaymentIcons();
        Assert.assertTrue(paymentIcons.size() <= expectedPaymentIcons.length,
                "Not all payment icons are displayed");
    }

    @AfterClass
    @Step("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤, —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞")
    public void tearDown() {
        try {
            // 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Allure –æ—Ç—á–µ—Ç
            generateAllureReport();

            // 2. –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç—á–µ—Ç–∞
            takeAllureReportScreenshot();

            // 3. –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
            if (driver != null) {
                driver.quit();
            }

            System.out.println("‚úÖ Allure –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω –∏ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!");
            System.out.println("üìÅ –°–∫—Ä–∏–Ω—à–æ—Ç: " + SCREENSHOTS_DIR + "/allure-report-screenshot.png");

        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: " + e.getMessage());
            if (driver != null) {
                driver.quit();
            }
        }
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
     */
    private void createScreenshotsDirectory() {
        try {
            Path path = Paths.get(SCREENSHOTS_DIR);
            if (!Files.exists(path)) {
                Files.createDirectories(path);
                System.out.println("üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: " + SCREENSHOTS_DIR);
            }
        } catch (IOException e) {
            System.err.println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: " + e.getMessage());
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Allure –æ—Ç—á–µ—Ç
     */
    private void generateAllureReport() {
        try {
            System.out.println("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Allure –æ—Ç—á–µ—Ç–∞...");

            ProcessBuilder processBuilder = new ProcessBuilder();

            if (System.getProperty("os.name").toLowerCase().contains("win")) {
                processBuilder.command("cmd.exe", "/c",
                        "mvn", "allure:report");
            } else {
                processBuilder.command("bash", "-c",
                        "mvn allure:report");
            }

            processBuilder.directory(new File(System.getProperty("user.dir")));
            Process process = processBuilder.start();

            // –ß–∏—Ç–∞–µ–º –≤—ã–≤–æ–¥ –ø—Ä–æ—Ü–µ—Å—Å–∞
            java.io.BufferedReader reader = new java.io.BufferedReader(
                    new java.io.InputStreamReader(process.getInputStream()));
            String line;
            while ((line = reader.readLine()) != null) {
                System.out.println(line);
            }

            int exitCode = process.waitFor();
            if (exitCode == 0) {
                System.out.println("‚úÖ Allure –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!");
            } else {
                System.out.println("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Allure –æ—Ç—á–µ—Ç–∞. –ö–æ–¥: " + exitCode);
            }

        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: " + e.getMessage());
        }
    }

    /**
     * –î–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç Allure –æ—Ç—á–µ—Ç–∞
     */
    private void takeAllureReportScreenshot() {
        try {
            System.out.println("üì∏ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ Allure –æ—Ç—á–µ—Ç–∞...");

            // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
            Thread.sleep(2000);

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π WebDriver –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –æ—Ç—á–µ—Ç–∞
            WebDriver screenshotDriver = new ChromeDriver();
            screenshotDriver.manage().window().maximize();

            // –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ—Ç—á–µ—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ
            String reportPath = "file:///" + System.getProperty("user.dir")
                    + "/target/site/allure-maven-plugin/index.html";
            screenshotDriver.get(reportPath);

            // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            Thread.sleep(3000);

            // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
            File screenshot = ((TakesScreenshot) screenshotDriver).getScreenshotAs(OutputType.FILE);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
            String timestamp = new SimpleDateFormat("yyyyMMdd-HHmmss").format(new Date());
            String screenshotPath = SCREENSHOTS_DIR + "/allure-report-screenshot-" + timestamp + ".png";

            Files.copy(screenshot.toPath(), Paths.get(screenshotPath));
            System.out.println("‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: " + screenshotPath);

            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
            screenshotDriver.quit();

        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: " + e.getMessage());

            // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ—Ä–µ–∑ Selenium –µ—Å–ª–∏ –æ—Ç—á–µ—Ç –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è
            try {
                takeAlternativeScreenshot();
            } catch (Exception ex) {
                System.err.println("‚ùå –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç —Ç–∞–∫–∂–µ –Ω–µ —É–¥–∞–ª—Å—è: " + ex.getMessage());
            }
        }
    }

    /**
     * –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
     */
    private void takeAlternativeScreenshot() throws IOException {
        System.out.println("üì∏ –ü–æ–ø—ã—Ç–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞...");

        // –ü—Ä–æ—Å—Ç–æ –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        File screenshot = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
        String timestamp = new SimpleDateFormat("yyyyMMdd-HHmmss").format(new Date());
        String screenshotPath = SCREENSHOTS_DIR + "/final-page-screenshot-" + timestamp + ".png";

        Files.copy(screenshot.toPath(), Paths.get(screenshotPath));
        System.out.println("‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: " + screenshotPath);
    }
}